install.packages(c("alluvial", "DescTools", "devtools", "directlabels", "extrafont", "fitdistrplus", "forcats", "geosphere", "ggalluvial", "ggforce", "ggmap", "igraph", "lubridate", "mapdata", "mapplots", "maps", "RJSONIO", "RODBC", "rworldmap", "timeDate", "waffle"))
library(RODBC)           # Provides database connectivity
library(dplyr)           # only used for nice format of Head() function here
library(gridExtra)
library(forcats)
library(grid)
library(DescTools)
library(devtools)
library(fitdistrplus)
library(RGraphics)
library(ggforce) # for 'geom_arc_bar'
library(reshape)
library(stringr)
library(tidyr)
library(timeDate)
library(lubridate)
library(RJSONIO)
library(maps)
library(mapdata)
library(geosphere)
library(ggmap)
library(ggplot2)
library(tools)
library(mapplots)
library(viridis)
library(ggrepel)
library(formattable)
library(extrafont)
library(alluvial)
library(ggalluvial)
library(waffle)
library(directlabels)
library(urbnmapr)
library(rworldmap)
font_import()
loadfonts()
Sys.setenv(R_GSCMD ="C:/Program Files (x86)/gs/gs9.23/bin/gswin32c.exe")
options(scipen=999)#Disables scientific notation
#Approved Grants only?
approved=FALSE
#Set Date filter and Options
dateType='GrantFiscalYear'
dateEquality='='
#date='2012-07-27'
date='1992'
Qstart='2017-12-01'
Qend='2018-11-30'
percent <- function(x, digits = 2, format = "f", ...) {
paste0(formatC(100 * x, format = format, digits = digits, ...), "%")
}
# The Connection string comes from the Azure ODBC text box
connectionString <- "Driver={SQL Server Native Client 11.0};Server=tcp:gd-useas-mssql-bi01.database.windows.net,1433;Database=Wellspring-PRD-BI;Uid=BIReader;Pwd=7twm2ZghNQPyjJNq;Encrypt=yes;TrustServerCertificate=no;Connection Timeout=30;"
#Open your RODBC connection
myconn <- odbcDriverConnect(connectionString)
##Filter requests by disposition date and HasAttribs by the earliest CreateDate in selected Requests to minimize data intake
sqlQuery_requests_2017 <- paste("SELECT * FROM Requests
WHERE", dateType,">'", date,"'
ORDER BY GrantAmount DESC;", sep=' ')
requests_2017 <- sqlQuery(myconn, sqlQuery_requests_2017,stringsAsFactors=FALSE)
minDate<-paste(min(requests_2017$CreateDate),sep='')
##Select Full Tables (except for HasAttribs which is filtered by above to only the ones needed)
sqlQuery_HasAttribs <- paste("SELECT * FROM HasAttribs WHERE CreateDate >=","'",minDate,"'", sep='')
sqlQuery_Attribs <- "SELECT * FROM Attribs"
sqlQuery_AttribTypes <- "SELECT * FROM AttribTypes"
sqlQuery_Organizations <- "SELECT * FROM Organizations"
sqlQuery_OrganizationBudgets<-"SELECT * FROM BudgetYears"
sqlQuery_Statuses <- "SELECT * FROM Statuses"
sqlQuery_HasContact <- "SELECT * FROM HasContact"
sqlQuery_Addresses <- "SELECT * FROM Addresses"
sqlQuery_RequestAddresses <- "SELECT * FROM RequestAddresses"
sqlQuery_Contacts <- "SELECT * FROM Contacts"
sqlQuery_EmailAddresses <- "SELECT * FROM EmailAddresses"
sqlQuery_Payments <- "SELECT * FROM Payments"
sqlQuery_Type <- "SELECT * FROM TransactionTypes"
sqlQuery_Budget <- "SELECT * FROM BudgetAllocations"
sqlQuery_FY <- "SELECT * FROM FiscalYears"
sqlQuery_Regions <- "SELECT * FROM Regions"
#sqlQuery_Descriptions <- "SELECT * FROM Descriptions"
#sqlQuery_Documents <- "SELECT * FROM Documents"
##Store tables as dataframes
HasAttribs_Raw <- sqlQuery(myconn, sqlQuery_HasAttribs,stringsAsFactors=FALSE)
Attribs_Raw <- sqlQuery(myconn, sqlQuery_Attribs,stringsAsFactors=FALSE)
AttribTypes_Raw <- sqlQuery(myconn, sqlQuery_AttribTypes,stringsAsFactors=FALSE)
Organizations_Raw <- sqlQuery(myconn, sqlQuery_Organizations,stringsAsFactors=FALSE)
OrganizationBudgets_Raw <- sqlQuery(myconn, sqlQuery_OrganizationBudgets,stringsAsFactors=FALSE)
Statuses_Raw <- sqlQuery(myconn, sqlQuery_Statuses,stringsAsFactors=FALSE)
HasContact_Raw <- sqlQuery(myconn, sqlQuery_HasContact,stringsAsFactors=FALSE)
Addresses_Raw <- sqlQuery(myconn, sqlQuery_Addresses,stringsAsFactors=FALSE)
RequestAddresses_Raw <- sqlQuery(myconn, sqlQuery_RequestAddresses,stringsAsFactors=FALSE)
Contacts_Raw <- sqlQuery(myconn, sqlQuery_Contacts,stringsAsFactors=FALSE)
EmailAddresses_Raw <- sqlQuery(myconn, sqlQuery_EmailAddresses,stringsAsFactors=FALSE)
Payments_Raw <- sqlQuery(myconn, sqlQuery_Payments,stringsAsFactors=FALSE)
Types_Raw <- sqlQuery(myconn, sqlQuery_Type,stringsAsFactors=FALSE)
Budgets_Raw <- sqlQuery(myconn, sqlQuery_Budget,stringsAsFactors=FALSE)
FY <- sqlQuery(myconn, sqlQuery_FY,stringsAsFactors=FALSE)
Regions <- sqlQuery(myconn, sqlQuery_Regions,stringsAsFactors=FALSE)
knitr::opts_chunk$set(echo=FALSE, warning=FALSE, message=FALSE)
library(leaflet)
library(sf)
library(tidyverse)
library(tmap)
library(spatstat)
library(maptools)
library(raster)
percent <- function(x, digits = 2, format = "f", ...) {
paste0(formatC(100 * x, format = format, digits = digits, ...), "%")
}
setwd("C:/Users/rcarder/Documents/dev/wpf/DCgrantees")
metro<-st_read("Metro_Lines_Regional",quiet = TRUE)%>% st_transform(4326)
metro_stations<-st_read("Metro_Station_Entrances_in_DC", quiet = TRUE)%>% st_transform(4326)%>%
mutate(NAME=as.character(NAME),
LINE=as.character(LINE))%>%
separate(LINE,sep=",", into = c("1","2","3"))%>%
pivot_longer(9:11,values_to = "MetroLine",names_to = "dummy")%>%
filter(!is.na(MetroLine))%>%
filter(str_detect(NAME, "ELEV",negate=TRUE))%>%
mutate(MetroLine=str_trim(MetroLine))%>%
st_as_sf()
##Make Buffers
metroBuffer <- st_buffer(metro,.25/69)
metroStationsBuffer <- st_buffer(metro_stations,.25/69)
metroStationsIndBuffer <- st_buffer(metro_stations,.25/69)
metroStationsBuffer<-metroStationsBuffer %>%
group_by(MetroLine) %>%
summarize(geometry = st_union(geometry))
metroStationsIndBuffer<-metroStationsIndBuffer %>%
group_by(NAME) %>%
summarize(geometry = st_union(geometry),
Lines=paste(unique(str_to_title(MetroLine)),collapse = ", "))
metroIcons <- makeIcon(iconUrl = "https://www.dcmetroapp.com/images/production/artwork.png", iconWidth = 12, iconHeight = 12)
leaflet(metro)%>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolylines(color=metro$NAME, group = "Metro Lines")%>%
addMarkers(data=metro_stations,group = "Metro Stations",icon = metroIcons,  popup = ~as.character(NAME))%>%
addLayersControl(
overlayGroups = c("Metro Lines", "Metro Stations"),
options = layersControlOptions(collapsed = FALSE)
)%>%
groupOptions("Metro Stations", zoomLevels = 12:30)%>%
setView(-77.0369,38.9072,  zoom = 13)
leaflet(metro)%>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(data=metroStationsBuffer, color=metroStationsBuffer$MetroLine, group = ".25 Mile Metro Station Buffer",stroke = FALSE)%>%
addPolylines(color=metro$NAME, group = "Metro Lines")%>%
addMarkers(data=metro_stations,group = "Metro Stations",icon = metroIcons,  popup = ~as.character(NAME))%>%
addLayersControl(
overlayGroups = c("Metro Lines", "Metro Stations", ".25 Mile Metro Station Buffer"),
options = layersControlOptions(collapsed = FALSE)
)%>%
groupOptions("Metro Stations", zoomLevels = 12:30)%>%
setView(-77.0369,38.9072,  zoom = 13)
## Load Data
setwd("C:/Users/rcarder/Wellspring Philanthropic Fund/Data and Reports - Documents/Raw")
payments<-read.csv('masterpayments.csv',stringsAsFactors = FALSE)
##DC Only
GranteeLocationsDC<-payments%>%
filter(Statuses_Status.x=="Approved"|Statuses_Status.x=="Pending")%>%
filter(ProjectEndDate>=Sys.Date())%>%
filter(Program!="SCF"&Program!="PF"&Program!="2G")%>%
#filter(Program=="APR"|Program=="CES"|Program=="CS"|Program=="ICE"|Program=="GCR")%>%
group_by(Name, Lat, Lon, City.x, State.x)%>%
summarize(Amount=sum(SplitPaymentAmount),
NumGrants=n_distinct(RequestId))%>%
filter(State.x=="DC"|State.x=="District of Columbia"|State.x=="DC ")%>%
filter(!is.na(Lat))
GranteesSFDC<-st_as_sf(GranteeLocationsDC,coords = c("Lon","Lat"))%>%`st_crs<-`(4326)
##Overall
GranteeLocations<-payments%>%
filter(Statuses_Status.x=="Approved"|Statuses_Status.x=="Pending")%>%
filter(ProjectEndDate>=Sys.Date())%>%
filter(Program!="SCF"&Program!="PF"&Program!="2G")%>%
#filter(Program=="APR"|Program=="CES"|Program=="CS"|Program=="ICE"|Program=="GCR")%>%
group_by(Name, Lat, Lon, City.x, State.x)%>%
summarize(Amount=sum(SplitPaymentAmount),
NumGrants=n_distinct(RequestId))%>%
filter(State.x=="DC"|State.x=="District of Columbia"|State.x=="DC ")%>%
filter(!is.na(Lat))
GranteesSF<-st_as_sf(GranteeLocations,coords = c("Lon","Lat"))%>%`st_crs<-`(4326)
leaflet(metro)%>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(data=metroStationsBuffer, color=metroStationsBuffer$MetroLine, group = ".25 Mile Metro Station Buffer",stroke = FALSE)%>%
addPolylines(color=metro$NAME, group = "Metro Lines")%>%
addMarkers(data=metro_stations,group = "Metro Stations",icon = metroIcons,  popup = ~as.character(NAME))%>%
addCircles(data=GranteesSF, color="green",group = "DC Grantees",  popup = ~as.character(Name))%>%
addLayersControl(
overlayGroups = c("Metro Lines", "Metro Stations", ".25 Mile Metro Station Buffer", "DC Grantees"),
options = layersControlOptions(collapsed = FALSE)
)%>%
groupOptions("Metro Stations", zoomLevels = 12:30)%>%
setView(-77.0369,38.9072,  zoom = 13)
granteeMetroStationTable<-granteeMetrosStations%>%
filter(!is.na(NAME))%>%
group_by(NAME, Lines)%>%
summarise(`# Within 1/4 mile`=n_distinct(Name),
`% Within 1/4 mile`=percent(`# Within 1/4 mile`/totalGrantees))%>%
st_drop_geometry()%>%
dplyr::arrange(-`# Within 1/4 mile`)%>%
mutate(NAME=str_to_title(NAME))%>%
dplyr::rename("Metro Station"=1)%>%
filter(`# Within 1/4 mile`>1)
totalGrantees<-n_distinct(GranteesSF$Name)
granteeMetros<-st_join(GranteesSF,metroStationsBuffer)
granteeMetrosStations<-st_join(GranteesSF,metroStationsIndBuffer)
granteeMetroTable<-granteeMetros%>%
filter(!is.na(MetroLine))%>%
group_by(MetroLine)%>%
summarise(`# Within 1/4 mile`=n_distinct(Name),
`% Within 1/4 mile`=percent(`# Within 1/4 mile`/totalGrantees))%>%
st_drop_geometry()%>%
dplyr::arrange(-`# Within 1/4 mile`)%>%
mutate(MetroLine=str_to_title(MetroLine))%>%
dplyr::rename("Metro Line"=1)
kableExtra::kable(granteeMetroTable, booktabs = T) %>%
kableExtra::kable_styling(latex_options = "striped", position = "left")
granteeMetroStationTable<-granteeMetrosStations%>%
filter(!is.na(NAME))%>%
group_by(NAME, Lines)%>%
summarise(`# Within 1/4 mile`=n_distinct(Name),
`% Within 1/4 mile`=percent(`# Within 1/4 mile`/totalGrantees))%>%
st_drop_geometry()%>%
dplyr::arrange(-`# Within 1/4 mile`)%>%
mutate(NAME=str_to_title(NAME))%>%
dplyr::rename("Metro Station"=1)%>%
filter(`# Within 1/4 mile`>1)
kableExtra::kable(granteeMetroStationTable, booktabs = T) %>%
kableExtra::kable_styling(latex_options = "striped", position = "left")
#class(GranteesSF)
#GranteeDensity <- as.ppp(GranteeLocations, x=GranteeLocations$Lon,y=GranteeLocations$Lat)
#nyctPPP <- nyctSP %>%
# as("ppp")
#?as.ppp
#plot(snapDensity, main=NULL, las=1)
#snapRaster <- raster(snapDensity, crs = crs(nyct))
#plot(snapRaster)
library(modeldata)
data(ames)
View(ames)
#install.packages("ranger")
#install.packages("patchwork")
#install.packages("xgboost")
install.packages("modeltime")
library(tidyverse) # import, transform and visualize data
library(tidymodels) # modeling
library(tidymodels) # modeling
library(vip) # variable importance plots
library(hrbrthemes) # great looking themes for ggplot2
library(patchwork) # combine ggplots into the same graphic
library(glue) # insert strings in some plot titles
library(hrbrthemes) # great looking themes for ggplot2
library(patchwork) # combine ggplots into the same graphic
library(glue) # insert strings in some plot titles
library(ranger)
library(patchwork) # combine ggplots into the same graphic
library(glue) # insert strings in some plot titles
library(ranger)
library(randomForest)
library(modeldata)
data(ames)
# read data
setwd("C:/Users/rcarder/Documents/dev")
train <- read_csv(file = "./Titanic/train.csv")
test <- read_csv(file = "./Titanic/test.csv")
titanic_orig <- bind_rows(train, test)
titanic_split <- initial_split(train)
glimpse(titanic_orig)
library(tidymodels)
tidymodels_prefer()
library(tidymodels)
tidymodels_prefer()
ggplot(ames, aes(x = Sale_Price)) +
geom_histogram(bins = 50)
summary (ames)
summary(ames$Sale_Price)
ggplot(ames, aes(x = Sale_Price)) +
geom_histogram(bins = 50)%>%
scale_x_log10()
ggplot(ames, aes(x = Sale_Price)) +
geom_histogram(bins = 50)+
scale_x_log10()
options(scipen=999)
library(tidymodels)
tidymodels_prefer()
library(tidymodels)
tidymodels_prefer()
library(tidymodels)
ggplot(ames, aes(x = Sale_Price)) +
geom_histogram(bins = 50)+
scale_x_log10()
summary(ames$Sale_Price)
ames <- ames %>% mutate(Sale_Price = log10(Sale_Price))
ggplot(ames, aes(x = Sale_Price)) +
geom_histogram(bins = 50)
### DataKindDC Homelessness Project ###
#install.packages("GGally")
#install.packages("googlesheets4")
#install.packages("NbClust")
library(googlesheets4)
library(RODBC)# Provides database connectivity
library(dplyr)
library(gridExtra)
library(forcats)
library(grid)
library(DescTools)
library(devtools)
library(fitdistrplus)
library(RGraphics)
library(ggforce) # for 'geom_arc_bar'
library(reshape)
library(stringr)
library(tidyr)
library(rgdal)
library(NbClust)
library(timeDate)
library(lubridate)
library(GGally)
library(RJSONIO)
library(maps)
library(mapdata)
library(geosphere)
library(ggmap)
library(ggplot2)
library(tools)
library(mapplots)
library(viridis)
library(ggrepel)
library(formattable)
library(extrafont)
library(alluvial)
library(ggalluvial)
library(waffle)
library(directlabels)
library(urbnmapr)
library(statebins)
library(rworldmap)
library(rwunderground)
#devtools::install_github("ropensci/rnoaa")
library(rnoaa)
library(tidyverse)
library(magrittr)
library(cluster)
library(cluster.datasets)
library(cowplot)
library(NbClust)
library(clValid)
library(ggfortify)
library(clustree)
library(dendextend)
library(factoextra)
library(FactoMineR)
library(corrplot)
library(GGally)
library(ggiraphExtra)
library(knitr)
library(kableExtra)
stayData<-read_sheet("https://docs.google.com/spreadsheets/d/1m4zCOrHzPWb_GsaEr9FL30VYUUgUZbRRfWU_sMzaQK8/edit#gid=872071627")
##Load Data
weatherData<-read_sheet("https://docs.google.com/spreadsheets/d/1w8WCWvveYq2HppELyw3jebhPEO9kGZNhj8GBnegZlbM/edit#gid=1585438251")
stayData<-read_sheet("https://docs.google.com/spreadsheets/d/1m4zCOrHzPWb_GsaEr9FL30VYUUgUZbRRfWU_sMzaQK8/edit#gid=872071627")
library(googlesheets4)
library(tidyverse)
#devtools::install_github("ropensci/rnoaa")
library(rnoaa)
##Key removed; get one for NOAA API to use
options(noaakey = "KngmmmaccNcjwTPUOIRQAOjOEzzdAHSh")
##WeatherData
stations <- ncdc_stations(extent = c(38.9, -77.25, 39, -77))
dcstations<-stations$data
station<-"GHCND:USC00186350"
GHCND:US1MDMG0042
ncdc_stations(stationid=station)
ncdc_datasets(stationid = station)
ncdc_datatypes(datasetid = "GHCND", stationid = station)
ncdc(datasetid = "GHCND", locationid = "ZIP:20002", datatypeid = "TMAX",
limit = 10, startdate = "2012-01-19", enddate = "2012-02-24")
staysbyYear<-stayData%>%
mutate(year=year(start))%>%
group_by(year)%>%
summarize(Amount=n())
View(staysbyYear)
minYear<-2000
maxYear<-2021
years<-seq(from=minYear,to=maxYear, by=1)
Total<-as.data.frame(seq(from=as.Date(paste(minYear,"-01-01",sep='')),to=as.Date(paste(maxYear,"-12-31",sep='')),by=1))%>%
dplyr::rename("date"=1)
weatherVariables<-c("TMAX","TMIN","PRCP","SNOW") ##API may time out with more than 4 variables
for (i in weatherVariables) {
assign(paste("Total",i,sep = ''),NULL)
for (j in years) {
dat<-ncdc(datasetid='GHCND', stationid=station, datatypeid=i, startdate = paste(j,'-01-01',sep=''), enddate = paste(j,'-12-31',sep=''), limit=500, add_units = TRUE)$data
colnames(dat)[2:9] <- paste(i, colnames(dat)[2:9], sep = "_")
dat<-dat%>%
dplyr::select(1,4,9)%>%
mutate(date=as.Date(date))
assign(paste("Total",i,sep = ''),bind_rows(get(paste("Total",i,sep = '')),dat)%>%
mutate(date=as.Date(date)))
}
Total<-Total%>%
full_join(get(paste("Total",i,sep = '')),by=c("date"))
}
View(weatherData)
##Write to cloned repo
setwd("C:/Users/rcarder/Documents/dev/DC-DHS-Public/external data")
write.csv(Total, "weatherdata.csv", row.names = FALSE)
library(googlesheets4)
library(rnoaa)
library(tidyverse)
unique(stayData$name)
n_distinct(stayData$client_id)
##Some date cleaning; filling in NAs in exit date with the day date was pulled for time calculations
datePulled<-"2021-06-11"
stayData$end[is.na(stayData$end)]<-datePulled
stayData$end[stayData$end=='']<-datePulled
stayData$start<-as.Date(stayData$start)
stayData$end<-as.Date(stayData$end)
weatherData$date<-as.Date(weatherData$date)
weatherData$TMIN_value<-as.numeric(weatherData$TMIN_value)
weatherData$TMAX_value<-as.numeric(weatherData$TMAX_value)
weatherData$PRCP_value<-as.numeric(weatherData$PRCP_value)
weatherData$SNOW_value<-as.numeric(weatherData$SNOW_value)
weatherDataClean<-as_tibble(weatherData)%>%
mutate(MinTempF=TMIN_value*(9/50)+32,
MaxTempF=TMAX_value*(9/50)+32,
SnowIn=SNOW_value/25.4,
PrecipIn=PRCP_value/254)%>%
dplyr::select(1,10,11,12,13)
##create date sequence
minYear<-2005
maxYear<-2021
Dates<-seq(from=as.Date(paste(minYear,"-01-01",sep='')),to=as.Date(paste(maxYear,"-12-31",sep='')),by=1)
##Create data for each day, and how many people are in each shelter
DateCount<-NULL
for (i in Dates){
print(as.Date(as.POSIXct.Date(i)))
temp<-stayData%>%
mutate(inRange=ifelse(start<=i&end>=i,1,0))%>%
group_by(name)%>%
summarize(Total=sum(inRange))%>%
mutate(date=as.Date(as.POSIXct.Date(i)))
DateCount<-bind_rows(DateCount,temp)
}
stayDataGender<-read_sheet("https://docs.google.com/spreadsheets/d/1LfFB4Xcv5Io0Q8SmezZohf0J01qeqT2eyq9zsUdoBVs/edit")
stayDataGender<-read_sheet("https://docs.google.com/spreadsheets/d/1LfFB4Xcv5Io0Q8SmezZohf0J01qeqT2eyq9zsUdoBVs/edit#gid=257172774")
